package main

import (
	"fmt"
	"os"

	"github.com/creativeprojects/hosts-filter/constants"
	"github.com/spf13/pflag"
)

type commandLineFlags struct {
	help    bool
	quiet   bool
	verbose bool
	config  string
	noAnsi  bool
	logFile string
	remove  bool
	stdout  bool
}

// loadFlags loads command line flags
func loadFlags() (*pflag.FlagSet, commandLineFlags) {
	flagset := pflag.NewFlagSet(constants.Name, pflag.ExitOnError)
	flagset.Usage = func() {
		fmt.Printf("\nUsage of %s:\n", constants.Name)
		fmt.Printf("\n%s [flags]\n", constants.Name)
		fmt.Printf("\n%s flags:\n", constants.Name)
		flagset.PrintDefaults()
		fmt.Printf("\nMore information: https://github.com/creativeprojects/hosts-filter\n")
	}
	flags := commandLineFlags{}

	flagset.BoolVarP(&flags.help, "help", "h", false, "display this help")
	flagset.BoolVarP(&flags.quiet, "quiet", "q", false, "display only warnings and errors")
	flagset.BoolVarP(&flags.verbose, "verbose", "v", false, "display some debugging information")
	flagset.StringVarP(&flags.config, "config", "c", "config.yaml", "configuration file")
	flagset.StringVarP(&flags.logFile, "log", "l", "", "logs into a file instead of the console")
	flagset.BoolVar(&flags.noAnsi, "no-ansi", false, "disable ansi control characters (disable console colouring)")
	flagset.BoolVarP(&flags.remove, "remove", "r", false, "clear up the hosts file of all entries generated by "+constants.Name)
	flagset.BoolVarP(&flags.stdout, "stdout", "o", false, "don't save the hosts file in place, but send it to the standard output instead")

	_ = flagset.Parse(os.Args[1:])

	return flagset, flags
}
